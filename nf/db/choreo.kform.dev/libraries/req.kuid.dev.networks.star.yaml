apiVersion: choreo.kform.dev/v1alpha1
kind: Library
metadata:
  annotations:
    api.choreo.kform.dev/origin: '{"kind":"File"}'
  creationTimestamp: "2024-10-07T11:30:29Z"
  managedFields:
  - apiVersion: choreo.kform.dev/v1alpha1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:api.choreo.kform.dev/origin: {}
      f:spec:
        .: {}
        f:code: {}
        f:type: {}
      f:status: {}
    manager: inputfileloader
    operation: Apply
    time: "2024-10-07T11:30:29Z"
  name: req.kuid.dev.networks.star
  resourceVersion: "0"
  uid: 36507e00-2268-4aa6-8dd1-a709c456875d
spec:
  code: |
    def getSpec(self):
      return self.get("spec", {})

    def getSpecName(self):
      spec =  self.get("spec", {})
      return spec.get("name", {})

    def getStatus(self):
      if "status" not in self:
        self["status"] = {}
      return self.get("status", {})

    def setStatusName(self, name):
      status = getStatus(self)
      status["name"] = name
      self["status"] = status
      return self

    def getNetworkReqSpec(name, partition, networkType, ipFamilyPolicy):
      spec = {
        "name": name,
        "partition": partition,
        "type": networkType,
        "ipFamilyPolicy": ipFamilyPolicy,
      }
      return spec

    def getNetworkReq(name, namespace, spec):
      return {
        "apiVersion": "req.kuid.dev/v1alpha1",
        "kind": "Network",
        "metadata": {
            "name": name,
            "namespace": namespace,
        },
        "spec": spec,
      }
  type: starlark
status: {}
